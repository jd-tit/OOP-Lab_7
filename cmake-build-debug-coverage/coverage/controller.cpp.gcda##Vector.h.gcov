        -:    0:Source:C:/Projects/fac/OOP/Lab5_Contract_de_studii/Vector.h
        -:    0:Graph:C:\Projects\fac\OOP\Lab5_Contract_de_studii\cmake-build-debug-coverage\CMakeFiles\Lab5_Contract_de_studii.dir\controller.cpp.gcno
        -:    0:Data:C:\Projects\fac\OOP\Lab5_Contract_de_studii\cmake-build-debug-coverage\CMakeFiles\Lab5_Contract_de_studii.dir\controller.cpp.gcda
        -:    0:Runs:1
        -:    1://
        -:    2:// Created by jdt on 2022-04-06.
        -:    3://
        -:    4:
        -:    5:#ifndef LAB5_CONTRACT_DE_STUDII_VECTOR_H
        -:    6:#define LAB5_CONTRACT_DE_STUDII_VECTOR_H
        -:    7:
        -:    8:#include <cstdlib>
        -:    9:
        -:   10:template<typename T>
        -:   11:class Vector{
        -:   12:private:
        -:   13:  T* contents;
        -:   14:  size_t capacity;
        -:   15:  size_t crt_size;
        -:   16:  static const size_t RESIZE_FACTOR = 2;
        -:   17:  static const size_t INIT_MAX_SIZE = 10;
        -:   18:
        -:   19:  /**
        -:   20:   * Increase the size of the internal container
        -:   21:   */
        -:   22:  void increase_size();
        -:   23:
        -:   24:  /**
        -:   25:   * Decrease the size of the internal container
        -:   26:   */
        -:   27:  void decrease_size();
        -:   28:
        -:   29:public:
        -:   30:  struct iterator{
        -:   31:    using difference_type = std::ptrdiff_t;
        -:   32:    using iterator_category = std::random_access_iterator_tag;
        -:   33:    using value_type        = T;
        -:   34:    using pointer           = T*;
        -:   35:    using reference         = T&;
        -:   36:  private:
        -:   37:    T* i_ptr;
        -:   38:
        -:   39:  public:
function _ZN6VectorI6CourseE8iteratorC1EPS0_ called 10 returned 100% blocks executed 100%
       10:   40:    explicit iterator(T* cont): i_ptr(cont) {}
        -:   41:
function _ZN6VectorI6CourseE8iteratorppEv called 112 returned 100% blocks executed 100%
      112:   42:    iterator& operator++(){
      112:   43:      i_ptr++;
      112:   44:      return *this;
      112:   44-block  0
        -:   45:    }
        -:   46:
function _ZN6VectorI6CourseE8iteratormmEv called 2 returned 100% blocks executed 100%
        2:   47:    iterator& operator--(){
        2:   48:      i_ptr--;
        2:   49:      return *this;
        2:   49-block  0
        -:   50:    }
        -:   51:
        -:   52:    iterator& operator-(int val){
        -:   53:      i_ptr -= val;
        -:   54:      return *this;
        -:   55:    }
        -:   56:
function _ZN6VectorI6CourseE8iteratordeEv called 114 returned 100% blocks executed 100%
      114:   57:    T& operator*(){
      114:   58:      return *(i_ptr);
      114:   58-block  0
        -:   59:    }
        -:   60:
        -:   61:    friend bool operator==(iterator crt, iterator other){
        -:   62:      return  crt.i_ptr == other.i_ptr;
        -:   63:    }
        -:   64:
function _ZneN6VectorI6CourseE8iteratorES2_ called 116 returned 100% blocks executed 100%
      116:   65:    friend bool operator!=(iterator crt, iterator other){
      116:   66:      return crt.i_ptr != other.i_ptr;
      116:   66-block  0
        -:   67:    }
        -:   68:
        -:   69:    T& operator[](size_t index){
        -:   70:      return *(i_ptr + index);
        -:   71:    }
        -:   72:  };
        -:   73:
        -:   74:  struct const_iterator{
        -:   75:    using difference_type = std::ptrdiff_t;
        -:   76:    using iterator_category = std::random_access_iterator_tag;
        -:   77:    using value_type        = const T;
        -:   78:    using pointer           = T* const;
        -:   79:    using reference         = const T&;
        -:   80:  private:
        -:   81:    T*i_ptr;
        -:   82:  public:
function _ZN6VectorI6CourseE14const_iteratorC1EPS0_ called 50 returned 100% blocks executed 100%
       50:   83:    explicit const_iterator(T* cont): i_ptr(cont) {}
        -:   84:
function _ZN6VectorI6CourseE14const_iteratorppEv called 29 returned 100% blocks executed 100%
       29:   85:    const_iterator& operator++(){
       29:   86:       i_ptr++;
       29:   87:      return *this;
       29:   87-block  0
        -:   88:    }
        -:   89:
function _ZN6VectorI6CourseE14const_iteratordeEv called 49 returned 100% blocks executed 100%
       49:   90:    T& operator*(){
       49:   91:      return *(i_ptr);
       49:   91-block  0
        -:   92:    }
        -:   93:
function _ZN6VectorI6CourseE14const_iteratormiES2_ called 20 returned 100% blocks executed 100%
       20:   94:    difference_type operator-(const_iterator other){
       20:   95:      return i_ptr - other.i_ptr;
       20:   95-block  0
        -:   96:    }
        -:   97:
        -:   98:    const_iterator& operator-(int val){
        -:   99:      i_ptr -= val;
        -:  100:      return *this;
        -:  101:    }
        -:  102:
        -:  103:    const_iterator& operator+(int val){
        -:  104:      i_ptr += val;
        -:  105:      return *this;
        -:  106:    }
        -:  107:
        -:  108:    const_iterator& operator--(){
        -:  109:      --i_ptr;
        -:  110:      return *this;
        -:  111:    }
        -:  112:
        -:  113:    bool operator<=(const_iterator other){
        -:  114:      return i_ptr <= other.i_ptr;
        -:  115:    }
        -:  116:
        -:  117:    bool operator<(const_iterator other){
        -:  118:      return i_ptr < other.i_ptr;
        -:  119:    }
        -:  120:
function _ZeqN6VectorI6CourseE14const_iteratorES2_ called 12 returned 100% blocks executed 100%
       12:  121:    friend bool operator==(const_iterator crt, const_iterator other){
       12:  122:      return  crt.i_ptr == other.i_ptr;
       12:  122-block  0
        -:  123:    }
        -:  124:
function _ZneN6VectorI6CourseE14const_iteratorES2_ called 14 returned 100% blocks executed 100%
       14:  125:    friend bool operator!=(const_iterator crt, const_iterator other){
       14:  126:      return crt.i_ptr != other.i_ptr;
       14:  126-block  0
        -:  127:    }
        -:  128:
        -:  129:    const T& operator[](size_t index){
        -:  130:      return *(i_ptr + index);
        -:  131:    }
        -:  132:  };
        -:  133:
        -:  134:  Vector();
        -:  135:
        -:  136:  Vector(Vector&);
        -:  137:
        -:  138:  ~Vector();
        -:  139:
        -:  140:  /**
        -:  141:   * Add an element to the vector
        -:  142:   * @param e - the element ot be added
        -:  143:   */
        -:  144:  void push_back(const T& e);
        -:  145:
        -:  146:  /**
        -:  147:   * Erase an element a a given position
        -:  148:   * @param it
        -:  149:   */
        -:  150:  void erase(const_iterator it);
        -:  151:
        -:  152:  /**
        -:  153:   * Erase an element a a given position
        -:  154:   * @param it
        -:  155:   */
        -:  156:  void erase(iterator it);
        -:  157:
        -:  158:  /**
        -:  159:   * Get a constant iterator to the beginning of the vector
        -:  160:   * @return The iterator
        -:  161:   */
        -:  162:  Vector<T>::const_iterator cbegin() const;
        -:  163:
        -:  164:
        -:  165:  /**
        -:  166:   * Get a constant iterator to the end of the vector
        -:  167:   * @return The iterator
        -:  168:   */
        -:  169:  Vector<T>::const_iterator cend() const;
        -:  170:
        -:  171:  /**
        -:  172:   * Get an iterator to the beginning of the vector
        -:  173:   * @return  The iterator
        -:  174:   */
        -:  175:  Vector<T>::iterator begin();
        -:  176:
        -:  177:/**
        -:  178: * Get an iterator to the end of the vector
        -:  179: * @return  The iterator
        -:  180: */
        -:  181:  Vector<T>::iterator end();
        -:  182:
        -:  183:  /**
        -:  184:   * Get the element at a given index.
        -:  185:   * @param index
        -:  186:   * @return
        -:  187:   */
function _ZN6VectorI6CourseEixEy called 170 returned 100% blocks executed 100%
      170:  188:  T& operator[](size_t index){
      170:  189:      return contents[index];
      170:  189-block  0
        -:  190:  };
        -:  191:
        -:  192:    /**
        -:  193:     * Get the element at a given index.
        -:  194:     * @param index
        -:  195:     * @return
        -:  196:     */
        -:  197:  T& at(size_t index);
        -:  198:  const T& at(size_t index) const;
        -:  199:  [[nodiscard]] size_t size() const;
        -:  200:
        -:  201:};
        -:  202:
function _ZN6VectorI6CourseEC1Ev called 5 returned 100% blocks executed 89%
        5:  203:template <typename T> Vector<T>::Vector() :
        5:  204:  capacity(INIT_MAX_SIZE), crt_size(0)
        -:  205:{
        5:  206:  capacity = INIT_MAX_SIZE;
      55*:  207:  contents = new T[capacity];
        5:  207-block  0
branch  0 taken 5 (fallthrough)
branch  1 taken 0
        5:  207-block  1
    %%%%%:  207-block  2
        5:  207-block  3
call    2 returned 5
       50:  207-block  4
call    3 returned 50
       55:  207-block  5
branch  4 taken 50
branch  5 taken 5 (fallthrough)
        5:  208:}
        -:  209:
function _ZN6VectorI6CourseE13increase_sizeEv called 4 returned 100% blocks executed 94%
        4:  210:template <typename T> void Vector<T>::increase_size() {
        4:  211:  capacity *= RESIZE_FACTOR;
     304*:  212:  auto new_contents = new T[capacity];
        4:  212-block  0
branch  0 taken 4 (fallthrough)
branch  1 taken 0
        4:  212-block  1
    %%%%%:  212-block  2
        4:  212-block  3
call    2 returned 4
      300:  212-block  4
call    3 returned 300
      304:  212-block  5
branch  4 taken 300
branch  5 taken 4 (fallthrough)
      150:  213:  for(size_t i = 0; i < crt_size; ++i){
        4:  213-block  0
      150:  213-block  1
branch  0 taken 146
branch  1 taken 4 (fallthrough)
      146:  214:    new_contents[i] = contents[i];
      146:  214-block  0
call    0 returned 146
        -:  215:  }
      154:  216:  delete[] contents;
        4:  216-block  0
branch  0 taken 4 (fallthrough)
branch  1 taken 0
        4:  216-block  1
      154:  216-block  2
branch  2 taken 150 (fallthrough)
branch  3 taken 4
      150:  216-block  3
call    4 returned 150
        4:  216-block  4
call    5 returned 4
        4:  217:  contents = new_contents;
        4:  218:}
        -:  219:
        -:  220:template <typename T> void Vector<T>::decrease_size() {
        -:  221:  capacity /= RESIZE_FACTOR;
        -:  222:  auto new_contents = new T[capacity];
        -:  223:  for(size_t i = 0; i < crt_size; ++i){
        -:  224:    new_contents[i] = contents[i];
        -:  225:  }
        -:  226:  delete[] contents;
        -:  227:  contents = new_contents;
        -:  228:}
        -:  229:
function _ZN6VectorI6CourseED1Ev called 9 returned 100% blocks executed 100%
        9:  230:template <typename T> Vector<T>::~Vector() {
      399:  231:  delete[] contents;
        9:  231-block  0
branch  0 taken 9 (fallthrough)
branch  1 taken 0
        9:  231-block  1
      399:  231-block  2
branch  2 taken 390 (fallthrough)
branch  3 taken 9
      390:  231-block  3
call    4 returned 390
        9:  231-block  4
call    5 returned 9
        9:  232:}
        -:  233:
function _ZN6VectorI6CourseE9push_backERKS0_ called 224 returned 100% blocks executed 100%
      224:  234:template <typename T> void Vector<T>::push_back(const T &e) {
      224:  235:  if(crt_size +1 == capacity){
      224:  235-block  0
branch  0 taken 4 (fallthrough)
branch  1 taken 220
        4:  236:    increase_size();
        4:  236-block  0
call    0 returned 4
        -:  237:  }
      224:  238:  contents[crt_size] = e;
      224:  238-block  0
call    0 returned 224
      224:  239:  ++crt_size;
      224:  240:}
        -:  241:
function _ZNK6VectorI6CourseE6cbeginEv called 15 returned 100% blocks executed 100%
       15:  242:template <typename T> typename Vector<T>::const_iterator Vector<T>::  cbegin() const{
       15:  243:  return Vector<T>::const_iterator(contents);
       15:  243-block  0
call    0 returned 15
        -:  244:}
        -:  245:
function _ZNK6VectorI6CourseE4cendEv called 35 returned 100% blocks executed 100%
       35:  246:template <typename T> typename Vector<T>::const_iterator Vector<T>::cend() const{
       35:  247:  return Vector<T>::const_iterator(&contents[crt_size]);
       35:  247-block  0
call    0 returned 35
        -:  248:}
        -:  249:
function _ZN6VectorI6CourseE5beginEv called 4 returned 100% blocks executed 100%
        4:  250:template <typename T> typename Vector<T>::iterator Vector<T>::begin() {
        4:  251:  return Vector<T>::iterator(contents);
        4:  251-block  0
call    0 returned 4
        -:  252:}
        -:  253:
function _ZN6VectorI6CourseE3endEv called 6 returned 100% blocks executed 100%
        6:  254:template <typename T> typename Vector<T>::iterator Vector<T>::end() {
        6:  255:  return Vector<T>::iterator(&contents[crt_size]);
        6:  255-block  0
call    0 returned 6
        -:  256:}
        -:  257:
function _ZN6VectorI6CourseE5eraseENS1_14const_iteratorE called 2 returned 100% blocks executed 100%
        2:  258:template <typename T> void Vector<T>::erase(const_iterator it) {
        2:  259:  auto last = --end();
        2:  259-block  0
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
        2:  259-block  1
call    3 returned 2
        2:  260:  std::swap(*it, *last);
call    0 returned 2
call    1 returned 2
call    2 returned 2
branch  3 taken 2 (fallthrough)
branch  4 taken 0 (throw)
        2:  261:  --crt_size;
        2:  262:}
        2:  262-block  0
        -:  263:
        -:  264:template <typename T> void Vector<T>::erase(Vector::iterator it) {
        -:  265:  auto next = it;
        -:  266:  ++next;
        -:  267:  std::copy(next, end(), it);
        -:  268:}
        -:  269:
        -:  270:template <typename T> T& Vector<T>::at(size_t index) {
        -:  271:  return contents[index];
        -:  272:}
function _ZNK6VectorI6CourseE4sizeEv called 17 returned 100% blocks executed 100%
       17:  273:template <typename T> size_t Vector<T>::size() const {
       17:  274:  return crt_size;
       17:  274-block  0
        -:  275:}
        -:  276:template <typename T> const T &Vector<T>::at(size_t index) const {
        -:  277:  return contents[index];
        -:  278:}
function _ZN6VectorI6CourseEC1ERS1_ called 4 returned 100% blocks executed 86%
        4:  279:template <typename T> Vector<T>::Vector(Vector<T>& old) :
        4:  280:capacity{old.capacity}, crt_size{0} {
     194*:  281:  contents = new T[capacity];
        4:  281-block  0
branch  0 taken 4 (fallthrough)
branch  1 taken 0
        4:  281-block  1
    %%%%%:  281-block  2
        4:  281-block  3
call    2 returned 4
      190:  281-block  4
call    3 returned 190
      194:  281-block  5
branch  4 taken 190
branch  5 taken 4 (fallthrough)
      120:  282:  for(T element : old){
        4:  282-block  0
call    0 returned 4
branch  1 taken 4 (fallthrough)
branch  2 taken 0 (throw)
        4:  282-block  1
call    3 returned 4
branch  4 taken 4 (fallthrough)
branch  5 taken 0 (throw)
      112:  282-block  2
call    6 returned 112
call    7 returned 112
branch  8 taken 112 (fallthrough)
branch  9 taken 0 (throw)
      112:  282-block  3
call   10 returned 112
call   11 returned 112
      116:  282-block  4
call   12 returned 116
branch 13 taken 112
branch 14 taken 4 (fallthrough)
    $$$$$:  282-block  5
call   15 never executed
      112:  283:    push_back(element);
      112:  283-block  0
call    0 returned 112
branch  1 taken 112 (fallthrough)
branch  2 taken 0 (throw)
        -:  284:  }
        4:  285:}
        4:  285-block  0
        -:  286:
        -:  287:#endif // LAB5_CONTRACT_DE_STUDII_VECTOR_H
