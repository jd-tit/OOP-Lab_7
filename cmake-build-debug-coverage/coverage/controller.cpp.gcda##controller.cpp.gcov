        -:    0:Source:C:/Projects/fac/OOP/Lab5_Contract_de_studii/controller.cpp
        -:    0:Graph:C:\Projects\fac\OOP\Lab5_Contract_de_studii\cmake-build-debug-coverage\CMakeFiles\Lab5_Contract_de_studii.dir\controller.cpp.gcno
        -:    0:Data:C:\Projects\fac\OOP\Lab5_Contract_de_studii\cmake-build-debug-coverage\CMakeFiles\Lab5_Contract_de_studii.dir\controller.cpp.gcda
        -:    0:Runs:1
        -:    1://
        -:    2:// Created by jdt on 3/27/2022.
        -:    3://
        -:    4:
        -:    5:#include <functional>
        -:    6:#include "controller.h"
        -:    7:#include "domain.h"
        -:    8:#include "validate.h"
        -:    9:#include "exception.h"
        -:   10:
        -:   11:void quicksort(Vector<Course>& list, int l, int r, const std::function<bool (const Course& first, const Course& second)>& cmp);
        -:   12:
function _ZN18ContractController10add_courseERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES7_S7_S7_ called 9 returned 44% blocks executed 50%
        9:   13:void ContractController::add_course(const std::string& name, const std::string& teacher,
        -:   14:                                    const std::string& type,
        -:   15:                                    const std::string& hours_per_week)
        -:   16:{
        -:   17:  unsigned numerical_hpw;
        -:   18:
        9:   19:  if(!is_valid_string(name)){
        9:   19-block  0
call    0 returned 9
branch  1 taken 1 (fallthrough)
branch  2 taken 8
        1:   20:    throw(NameError("Error: Invalid name."));
        1:   20-block  0
call    0 returned 1
call    1 returned 1
call    2 returned 1
branch  3 taken 1 (fallthrough)
branch  4 taken 0 (throw)
        1:   20-block  1
call    5 returned 1
branch  6 taken 1 (fallthrough)
branch  7 taken 0 (throw)
        1:   20-block  2
call    8 returned 1
call    9 returned 1
call   10 returned 0
    $$$$$:   20-block  3
call   11 never executed
    $$$$$:   20-block  4
    $$$$$:   20-block  5
call   12 never executed
    $$$$$:   20-block  6
    $$$$$:   20-block  7
call   13 never executed
        -:   21:  }
        -:   22:
        8:   23:  if(!is_valid_string(teacher)){
        8:   23-block  0
call    0 returned 8
branch  1 taken 1 (fallthrough)
branch  2 taken 7
        1:   24:    throw(NameError("Error: Invalid teacher name."));
        1:   24-block  0
call    0 returned 1
call    1 returned 1
call    2 returned 1
branch  3 taken 1 (fallthrough)
branch  4 taken 0 (throw)
        1:   24-block  1
call    5 returned 1
branch  6 taken 1 (fallthrough)
branch  7 taken 0 (throw)
        1:   24-block  2
call    8 returned 1
call    9 returned 1
call   10 returned 0
    $$$$$:   24-block  3
call   11 never executed
    $$$$$:   24-block  4
    $$$$$:   24-block  5
call   12 never executed
    $$$$$:   24-block  6
    $$$$$:   24-block  7
call   13 never executed
        -:   25:  }
        -:   26:
        7:   27:  if(!is_valid_string(type)){
        7:   27-block  0
call    0 returned 7
branch  1 taken 1 (fallthrough)
branch  2 taken 6
        1:   28:    throw(CourseTypeError("Error: Invalid course type"));
        1:   28-block  0
call    0 returned 1
call    1 returned 1
call    2 returned 1
branch  3 taken 1 (fallthrough)
branch  4 taken 0 (throw)
        1:   28-block  1
call    5 returned 1
branch  6 taken 1 (fallthrough)
branch  7 taken 0 (throw)
        1:   28-block  2
call    8 returned 1
call    9 returned 1
call   10 returned 0
    $$$$$:   28-block  3
call   11 never executed
    $$$$$:   28-block  4
    $$$$$:   28-block  5
call   12 never executed
    $$$$$:   28-block  6
    $$$$$:   28-block  7
call   13 never executed
        -:   29:  }
        -:   30:
        -:   31:  try {
        6:   32:    numerical_hpw = std::stoi(hours_per_week);
        6:   32-block  0
call    0 returned 6
branch  1 taken 5 (fallthrough)
branch  2 taken 1 (throw)
        -:   33:  }
        1:   34:  catch (std::invalid_argument& e){
        1:   34-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
        1:   34-block  1
call    2 returned 1
        1:   35:    throw(HoursPerWeekError("Error: Input is not a number."));
call    0 returned 1
call    1 returned 1
call    2 returned 1
branch  3 taken 1 (fallthrough)
branch  4 taken 0 (throw)
        1:   35-block  0
call    5 returned 1
branch  6 taken 1 (fallthrough)
branch  7 taken 0 (throw)
        1:   35-block  1
call    8 returned 1
call    9 returned 1
call   10 returned 1
    $$$$$:   35-block  2
call   11 never executed
    $$$$$:   35-block  3
    $$$$$:   35-block  4
call   12 never executed
    $$$$$:   35-block  5
    $$$$$:   35-block  6
call   13 never executed
        1:   36:  }
        1:   36-block  0
call    0 returned 1
        5:   37:  if(!is_valid_hours_per_week(numerical_hpw)){
        5:   37-block  0
call    0 returned 5
branch  1 taken 0 (fallthrough)
branch  2 taken 5
    #####:   38:    throw(HoursPerWeekError("Invalid number of hours per week."));
    %%%%%:   38-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%:   38-block  1
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%:   38-block  2
call    8 never executed
call    9 never executed
call   10 never executed
    $$$$$:   38-block  3
call   11 never executed
    $$$$$:   38-block  4
    $$$$$:   38-block  5
call   12 never executed
    $$$$$:   38-block  6
    $$$$$:   38-block  7
call   13 never executed
        -:   39:  }
        -:   40:
        -:   41:  try{
        5:   42:    getCourse(name);
        5:   42-block  0
call    0 returned 5
branch  1 taken 1 (fallthrough)
branch  2 taken 4 (throw)
        -:   43:  }
        4:   44:  catch (std::out_of_range& e){
        4:   44-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 4
        4:   44-block  1
call    2 returned 4
        8:   45:    Course course{name, type, teacher, numerical_hpw, i_repo.next_free_id};
call    0 returned 4
branch  1 taken 4 (fallthrough)
branch  2 taken 0 (throw)
        4:   45-block  0
call    3 returned 4
branch  4 taken 4 (fallthrough)
branch  5 taken 0 (throw)
        4:   45-block  1
call    6 returned 4
branch  7 taken 4 (fallthrough)
branch  8 taken 0 (throw)
        4:   45-block  2
call    9 returned 4
call   10 returned 4
call   11 returned 4
    $$$$$:   45-block  3
    $$$$$:   45-block  4
        4:   46:    i_repo.add(course);
call    0 returned 4
branch  1 taken 4 (fallthrough)
branch  2 taken 0 (throw)
        4:   47:    return;
        4:   48:  }
        4:   48-block  0
call    0 returned 4
call    1 returned 4
    $$$$$:   48-block  1
call    2 never executed
    $$$$$:   48-block  2
call    3 never executed
        1:   49:  throw(std::invalid_argument("Error: Duplicate name."));
        1:   49-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1:   49-block  1
call    4 returned 0
    $$$$$:   49-block  2
call    5 never executed
        -:   50:}
function _ZN18ContractController6getAllEv called 2 returned 100% blocks executed 100%
        2:   51:const Repo<Course>& ContractController::getAll(){
        2:   52:  return i_repo;
        2:   52-block  0
        -:   53:}
function _ZN18ContractController13remove_courseERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 1 returned 100% blocks executed 100%
        1:   54:void ContractController::remove_course(const std::string& id_buff) {
        1:   55:  size_t target_id = std::stoi(id_buff);
        1:   55-block  0
call    0 returned 1
        1:   56:  i_repo.remove_by_id(target_id);
call    0 returned 1
        1:   57:}
function _ZN18ContractController13modify_courseERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES7_S7_S7_S7_ called 1 returned 100% blocks executed 100%
        1:   58:void ContractController::modify_course(const std::string& id_buff,
        -:   59:                                       const std::string &name,
        -:   60:                                       const std::string &teacher,
        -:   61:                                       const std::string &type,
        -:   62:                                       const std::string &hours_per_week)
        -:   63:{
        1:   64:  auto& res = i_repo.find_by_id(std::stoi(id_buff));
        1:   64-block  0
call    0 returned 1
call    1 returned 1
        1:   65:  auto hpw = std::stoi(hours_per_week);
call    0 returned 1
        1:   66:  res.set_name(name);
call    0 returned 1
call    1 returned 1
call    2 returned 1
        1:   67:  res.set_teacher(teacher);
call    0 returned 1
call    1 returned 1
call    2 returned 1
        1:   68:  res.set_type(type);
call    0 returned 1
call    1 returned 1
call    2 returned 1
        1:   69:  res.set_hpw(hpw);
call    0 returned 1
        1:   70:}
function _ZN18ContractController9getCourseERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 6 returned 33% blocks executed 75%
        6:   71:const Course& ContractController::getCourse(const std::string &name) {
        6:   72:  auto result = std::find_if(i_repo.begin(), i_repo.end(),
        6:   72-block  0
call    0 returned 6
branch  1 taken 6 (fallthrough)
branch  2 taken 0 (throw)
        6:   72-block  1
call    3 returned 6
branch  4 taken 6 (fallthrough)
branch  5 taken 0 (throw)
        6:   72-block  2
call    6 returned 6
branch  7 taken 6 (fallthrough)
branch  8 taken 0 (throw)
        6:   72-block  3
call    9 returned 6
branch 10 taken 6 (fallthrough)
branch 11 taken 0 (throw)
        6:   72-block  4
call   12 returned 6
    $$$$$:   72-block  5
call   13 never executed
    $$$$$:   72-block  6
function _ZZN18ContractController9getCourseERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEENKUlR6CourseE_clES9_ called 11 returned 100% blocks executed 100%
       11:   73:               [name](Course& e){return e.get_name() == name;}
       11:   73-block  0
call    0 returned 11
call    1 returned 11
        -:   74: );
        -:   75:
        6:   76:  if(result == i_repo.end())
call    0 returned 6
branch  1 taken 6 (fallthrough)
branch  2 taken 0 (throw)
        6:   76-block  0
call    3 returned 6
branch  4 taken 4 (fallthrough)
branch  5 taken 2
        4:   77:    throw(std::out_of_range("Error: Name not found."));
        4:   77-block  0
call    0 returned 4
call    1 returned 4
branch  2 taken 4 (fallthrough)
branch  3 taken 0 (throw)
        4:   77-block  1
call    4 returned 4
    $$$$$:   77-block  2
call    5 never executed
        4:   78:  return *result;
        2:   78-block  0
call    0 returned 2
        2:   78-block  1
        -:   79:}
        -:   80:
        -:   81:std::unique_ptr<Vector<Course>>
function _ZN18ContractController21getCoursesMatchingHPWERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES7_ called 3 returned 33% blocks executed 83%
        3:   82:ContractController::getCoursesMatchingHPW(const std::string& start_buff,
        -:   83:                                          const std::string& stop_buff)
        -:   84:{
        -:   85:  unsigned int start, stop;
        -:   86:  try{
        3:   87:    start = std::stoi(start_buff);
        3:   87-block  0
call    0 returned 3
branch  1 taken 2 (fallthrough)
branch  2 taken 1 (throw)
        2:   88:    stop = std::stoi(stop_buff);
        2:   88-block  0
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
        -:   89:  }
        1:   90:  catch(std::invalid_argument&){
        1:   90-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
        1:   90-block  1
call    2 returned 1
        1:   91:    throw(std::invalid_argument("Invalid range"));
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1:   91-block  0
call    4 returned 1
    $$$$$:   91-block  1
call    5 never executed
        1:   92:  }
        1:   92-block  0
call    0 returned 1
        -:   93:
        2:   94:  if(start > stop)
        2:   94-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 1
        1:   95:    throw(std::invalid_argument("Invalid range"));
        1:   95-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1:   95-block  1
call    4 returned 0
    $$$$$:   95-block  2
call    5 never executed
        -:   96:
        1:   97:  auto vector = std::make_unique<Vector<Course>>() ;
        1:   97-block  0
call    0 returned 1
        -:   98:
        5:   99:  for(auto it = i_repo.begin(); it != i_repo.end(); ++it){
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   99-block  0
        4:   99-block  1
call    3 returned 4
        5:   99-block  2
call    4 returned 5
branch  5 taken 5 (fallthrough)
branch  6 taken 0 (throw)
        5:   99-block  3
call    7 returned 5
branch  8 taken 4
branch  9 taken 1 (fallthrough)
        4:  100:    if((*it).getHPW() >= start && (*it).getHPW() <= stop){
        4:  100-block  0
call    0 returned 4
call    1 returned 4
branch  2 taken 3 (fallthrough)
branch  3 taken 1
        3:  100-block  1
call    4 returned 3
call    5 returned 3
branch  6 taken 3 (fallthrough)
branch  7 taken 0
        3:  100-block  2
        1:  100-block  3
        4:  100-block  4
branch  8 taken 3 (fallthrough)
branch  9 taken 1
        3:  101:      vector->push_back(*it);
        3:  101-block  0
call    0 returned 3
call    1 returned 3
call    2 returned 3
branch  3 taken 3 (fallthrough)
branch  4 taken 0 (throw)
        -:  102:    }
        -:  103:  }
        1:  104:  return vector;
        1:  104-block  0
        1:  104-block  1
    =====:  105:}
    $$$$$:  105-block  0
call    0 never executed
        -:  106:std::unique_ptr<Vector<Course>>
function _ZN18ContractController25getCoursesMatchingTeacherERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 1 returned 100% blocks executed 89%
        1:  107:ContractController::getCoursesMatchingTeacher(const std::string &teacher_name) {
        1:  108:  auto vector = std::make_unique<Vector<Course>>() ;
        1:  108-block  0
call    0 returned 1
        -:  109:
        5:  110:  for(auto it = i_repo.begin(); it != i_repo.end(); ++it){
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  110-block  0
        4:  110-block  1
call    3 returned 4
        5:  110-block  2
call    4 returned 5
branch  5 taken 5 (fallthrough)
branch  6 taken 0 (throw)
        5:  110-block  3
call    7 returned 5
branch  8 taken 4
branch  9 taken 1 (fallthrough)
        4:  111:    if((*it).get_teacher() == teacher_name){
        4:  111-block  0
call    0 returned 4
call    1 returned 4
call    2 returned 4
branch  3 taken 2 (fallthrough)
branch  4 taken 2
        2:  112:      vector->push_back(*it);
        2:  112-block  0
call    0 returned 2
call    1 returned 2
call    2 returned 2
branch  3 taken 2 (fallthrough)
branch  4 taken 0 (throw)
        -:  113:    }
        -:  114:  }
        1:  115:  return vector;
        1:  115-block  0
        1:  115-block  1
    =====:  116:}
    $$$$$:  116-block  0
call    0 never executed
        -:  117:std::unique_ptr<Vector<Course>>
function _ZN18ContractController11getSortedByERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 3 returned 100% blocks executed 67%
        3:  118:ContractController::getSortedBy(const std::string &criterion) {
        3:  119:  std::function<bool (const Course& first, const Course& second)> cmp;
        3:  119-block  0
call    0 returned 3
        3:  120:  if(criterion == "teacher"){
call    0 returned 3
branch  1 taken 1 (fallthrough)
branch  2 taken 2
function _ZZN18ContractController11getSortedByERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEENKUlRK6CourseSA_E_clESA_SA_ called 4 returned 100% blocks executed 100%
        4:  121:    cmp = [](const Course& first, const Course& second)
        -:  122:    {
        4:  123:      if(first.get_teacher() == second.get_teacher())
        4:  123-block  0
call    0 returned 4
call    1 returned 4
call    2 returned 4
branch  3 taken 1 (fallthrough)
branch  4 taken 3
        1:  124:        return first.get_type() < second.get_type();
        1:  124-block  0
call    0 returned 1
call    1 returned 1
call    2 returned 1
call    3 returned 1
call    4 returned 1
        3:  125:      return first.get_teacher() < second.get_teacher();
        3:  125-block  0
call    0 returned 3
call    1 returned 3
call    2 returned 3
call    3 returned 3
call    4 returned 3
        1:  126:    };
        1:  126-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  126-block  1
    $$$$$:  126-block  2
        2:  127:  } else if (criterion == "name") {
        2:  127-block  0
call    0 returned 2
branch  1 taken 1 (fallthrough)
branch  2 taken 1
function _ZZN18ContractController11getSortedByERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEENKUlRK6CourseSA_E0_clESA_SA_ called 4 returned 100% blocks executed 65%
        4:  128:    cmp = [](const Course& first, const Course& second)
        -:  129:    {
        4:  130:      if(first.get_name() == second.get_name())
        4:  130-block  0
call    0 returned 4
call    1 returned 4
call    2 returned 4
branch  3 taken 0 (fallthrough)
branch  4 taken 4
    #####:  131:        return first.get_type() < second.get_type();
    %%%%%:  131-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
        4:  132:      return first.get_name() < second.get_name();
        4:  132-block  0
call    0 returned 4
call    1 returned 4
call    2 returned 4
call    3 returned 4
call    4 returned 4
        1:  133:    };
        1:  133-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  133-block  1
    $$$$$:  133-block  2
        1:  134:  } else if (criterion == "hours") {
        1:  134-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0
function _ZZN18ContractController11getSortedByERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEENKUlRK6CourseSA_E1_clESA_SA_ called 4 returned 100% blocks executed 100%
        4:  135:    cmp = [](const Course& first, const Course& second)
        -:  136:    {
        4:  137:      if(first.getHPW() == second.getHPW())
        4:  137-block  0
call    0 returned 4
call    1 returned 4
branch  2 taken 1 (fallthrough)
branch  3 taken 3
        1:  138:        return first.get_type() < second.get_type();
        1:  138-block  0
call    0 returned 1
call    1 returned 1
call    2 returned 1
call    3 returned 1
call    4 returned 1
        3:  139:      return first.getHPW() < second.getHPW();
        3:  139-block  0
call    0 returned 3
call    1 returned 3
        1:  140:    };
        1:  140-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  140-block  1
    $$$$$:  140-block  2
        -:  141:  } else {
    #####:  142:    throw(std::invalid_argument("Error: Invalid sort criterion."));
    %%%%%:  142-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:  142-block  1
call    4 never executed
    $$$$$:  142-block  2
call    5 never executed
        -:  143:  }
        -:  144:
        3:  145:  auto result = std::make_unique<Vector<Course>>(this->i_repo.getVector());
        3:  145-block  0
call    0 returned 3
call    1 returned 3
branch  2 taken 3 (fallthrough)
branch  3 taken 0 (throw)
        -:  146:
        3:  147:  quicksort(*result, 0, result->size()-1, cmp);
        3:  147-block  0
call    0 returned 3
call    1 returned 3
call    2 returned 3
call    3 returned 3
branch  4 taken 3 (fallthrough)
branch  5 taken 0 (throw)
        6:  148:  return result;
        3:  148-block  0
        3:  148-block  1
        3:  149:}
        3:  149-block  0
call    0 returned 3
    $$$$$:  149-block  1
call    1 never executed
    $$$$$:  149-block  2
call    2 never executed
        -:  150:
function _Z5pivotR6VectorI6CourseEiiRKSt8functionIFbRKS0_S5_EE called 6 returned 100% blocks executed 81%
        6:  151:int pivot(Vector<Course>& list, int l, int r, const std::function<bool (const Course& first, const Course& second)>& cmp) {
        6:  152:  Course p = list[r];
        6:  152-block  0
call    0 returned 6
call    1 returned 6
branch  2 taken 6 (fallthrough)
branch  3 taken 0 (throw)
        6:  153:  int lt = l-1;
       18:  154:  for(int i = l; i < r; ++i){
        6:  154-block  0
       12:  154-block  1
       18:  154-block  2
branch  0 taken 12
branch  1 taken 6 (fallthrough)
       12:  155:    if(cmp(list[i], p)){
       12:  155-block  0
call    0 returned 12
call    1 returned 12
branch  2 taken 12 (fallthrough)
branch  3 taken 0 (throw)
       12:  155-block  1
branch  4 taken 7 (fallthrough)
branch  5 taken 5
        7:  156:      ++lt;
        7:  157:      Course aux = list[lt];
        7:  157-block  0
call    0 returned 7
call    1 returned 7
branch  2 taken 7 (fallthrough)
branch  3 taken 0 (throw)
        7:  158:      list[lt] = list[i];
        7:  158-block  0
call    0 returned 7
call    1 returned 7
call    2 returned 7
branch  3 taken 7 (fallthrough)
branch  4 taken 0 (throw)
        7:  159:      list[i] = aux;
        7:  159-block  0
call    0 returned 7
call    1 returned 7
branch  2 taken 7 (fallthrough)
branch  3 taken 0 (throw)
        7:  160:    }
        7:  160-block  0
call    0 returned 7
    $$$$$:  160-block  1
call    1 never executed
        -:  161:  }
        6:  162:  Course aux = list[r];
        6:  162-block  0
call    0 returned 6
call    1 returned 6
branch  2 taken 6 (fallthrough)
branch  3 taken 0 (throw)
        6:  163:  list[r] = list[lt+1];
        6:  163-block  0
call    0 returned 6
call    1 returned 6
call    2 returned 6
branch  3 taken 6 (fallthrough)
branch  4 taken 0 (throw)
        6:  164:  list[lt+1] = aux;
        6:  164-block  0
call    0 returned 6
call    1 returned 6
branch  2 taken 6 (fallthrough)
branch  3 taken 0 (throw)
        6:  165:  return lt + 1;
        6:  165-block  0
        6:  166:}
        6:  166-block  0
call    0 returned 6
call    1 returned 6
    $$$$$:  166-block  1
call    2 never executed
    $$$$$:  166-block  2
call    3 never executed
        -:  167:
function _Z9quicksortR6VectorI6CourseEiiRKSt8functionIFbRKS0_S5_EE called 15 returned 100% blocks executed 100%
       15:  168:void quicksort(Vector<Course>& list, int l, int r, const std::function<bool (const Course& first, const Course& second)>& cmp){
       15:  169:  if(l < r){
       15:  169-block  0
branch  0 taken 6 (fallthrough)
branch  1 taken 9
        6:  170:    int p_index = pivot(list, l, r, cmp);
        6:  170-block  0
call    0 returned 6
        -:  171:
        6:  172:    quicksort(list, l, p_index - 1, cmp);
call    0 returned 6
        6:  173:    quicksort(list, p_index + 1, r, cmp);
call    0 returned 6
        -:  174:  }
       15:  175:}
